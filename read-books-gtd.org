#+TITLE: reading schedule and notes
#+AUTHOR: lightjames

* STARTED 并行算法设计与性能优化
  SCHEDULED: <2016-10-16 Sun 22:20>

** STARTED chapter01 绪论
   SCHEDULED: <2016-10-16 Sun 22:20>

*** TODO 1.1 并行和向量化的作用

    -


* STARTED Advanced Programming in the Unix Environment, Third Edition

** STARTED chapter 04 文件和目录
   SCHEDULED: <2016-12-06 Tue 21:00>

*** DONE 4.10 Sticky Bit
    CLOSED: [2016-12-06 Tue 21:06] SCHEDULED: <2016-12-06 Tue 21:02>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-06 Tue 21:06]
    :END:

    - 程序的正文部分==>机器指令

*** DONE 4.11 chown, fchown, fchownat and lchown Functions
    CLOSED: [2016-12-06 Tue 21:23] SCHEDULED: <2016-12-06 Tue 21:09>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-06 Tue 21:23]
    :END:

    - results: change a file's user ID and group       #+END_SRC
ID.
    - when the *referenced file is a symbolic link*, lchown and fchownat (with AT_SYMLINK_NOFOLLOW flag set) only change the owners of the symbolic link itself, not the file pointed to by the symbolic link.
    - what if _POSIX_CHOWN_RESTRICTED is in effect?

*** DONE 4.12 File Size
    CLOSED: [2016-12-06 Tue 21:39] SCHEDULED: <2016-12-06 Tue 21:24>
    :LOGBOOK:
    - State "DONE"          #+END_SRC
   from "STARTED"    [2016-12-06 Tue 21:39]
    :END:

    - for a symbolic link, the file size is *the number of bits in the filename*.
    - *holes in a file*

*** DONE 4.13 File Truncation
    CLOSED: [2016-12-06 Tue 21:45] SCHEDULED: <2016-12-06 Tue 21:39>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-06 Tue 21:46]
    :END:

    - a special case of truncation: open a file with the O_TRUNC flag to empty a file.
    - functions: truncate() and ftruncate().

*** DONE 4.14 File Systems
    CLOSED: [2016-12-06 Tue 22:26] SCHEDULED: <2016-12-06 Tue 21:47>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-06 Tue 22:26]
    :END:

    - i-nodes: the i-nodes are fixed-length entries that contain most of the information about a file.
    - notice:
      1. each  i-node has a link count that contains the number of directory entries that point to it. *only when the link count goes to 0 can the  file be deleted.* these types of links are called *hard links*.
      2. the other type of link is called a *symbolic link*.
      3. only two items of interest are stored in the directory entry: the filename and  the i-node number.
      4. because the i-node number in the directory  entry points to an i-node in the same file system, *a directory entry can't refer to an i-node in  a different file system*.
      5. when *renaming a file* without changing file system, the actual contents of the file needn't be moved ==> all that need to be done is to *add a new directory entry that points to the existing i-node* and then *unlink the old directory entry*.
    - what about the link count field of a directory?
      1. any *leaf directory*(a directory that does  not contain any other  directories) always has a link count of 2: the directory entry that names  te directory and the entry for dot  in that directory.
      2. each subdirectory in  a parent directory causes the parent directory's link count to be  increased by 1. (.. entry added)

*** DONE 4.15 link, linkat, unlink, unlinkat, and remove Functions
    CLOSED: [2016-12-07 Wed 10:20] SCHEDULED: <2016-12-07 Wed 09:37>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-07 Wed 10:20]
    :END:

    - link and linkat
      - only the last component of the /newpath/ is created, *the rest of the path must already exist*.
      - when the *existing file is a symbolic link*, the /flag/ argument controls whether the linkat function creates a link to the symbolic link or to the file to which the symbolic link points.
      - the *creation* of the new directory entry and the *increment* of the link count must be an *atomic* operation.
      - if supports *the creation of hard links to directories*, it may *cause loops* in the file system. many file system implementations disallow hard links to directories for this reason.
    - unlink and unlinkat
      - conditions that prevents the contents of the file from being deleted:
        - link count > 0
        - some process has the file open

*** DONE 4.16 rename and renameat Functions
    CLOSED: [2016-12-07 Wed 10:30] SCHEDULED: <2016-12-07 Wed 10:21>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-07 Wed 10:30]
    :END:

    - depending on whether /oldname/  refers to a file, a directory, or a symbolic link, and what if /newname/ already exist.

*** DONE 4.17 Symbolic Links
    CLOSED: [2016-12-09 Fri 11:13] SCHEDULED: <2016-12-09 Fri 09:16>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-09 Fri 11:13]
    :END:

    - differences between symbolic links and hard links:
      [[./img/read-books-gtd_20161209_110601.png]]
      a symbolic link is an *indirect pointer* to a file, unlike the hard links which *point directly to the i-node* of the file.
    - when using functions that refer to a file by name, we always need to know *whether the function follows a symbolic link*.
    - notice: using symbolic links may *introduce loops into the file system*.
      [[./img/read-books-gtd_20161209_110755.png]]
      [[./img/read-books-gtd_20161209_110807.png]]

*** DONE 4.18 Creating and Reading Symbolic Links
    CLOSED: [2016-12-09 Fri 13:23] SCHEDULED: <2016-12-09 Fri 13:15>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-09 Fri 13:23]
    :END:

    - It's not required that /actualpath/ exist when the symbolic link is created.
    - Also, /actualpath/ and /sympath/ *needn't reside in the file system*.

*** DONE 4.19 File Times
    CLOSED: [2016-12-09 Fri 15:52] SCHEDULED: <2016-12-09 Fri 15:33>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-09 Fri 15:52]
    :END:

    - the difference between the modification time(st_mtim) and the changed-status time(st_ctim):
      - the *modification time* indicates when *the contents* fo the file were last modified.
      - the *changed-status time* indicates when *the i-node* of the file was last modified.
    - Note that the system doesn't maintain the last-access time for an i-node.
    - by default, the /ls/ command displays or sorts using the modification time of the files.

*** DONE 4.20 futimens, utimensat, and utimes, Functions
    CLOSED: [2016-12-12 Mon 22:28] SCHEDULED: <2016-12-09 Fri 15:52>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-12 Mon 22:28]
    :END:

    - the three functions above only change the access time(st_atim) and the modification time(st_mtim), the changed-status time(st_ctim) is automaticlly updated.

*** DONE 4.21 mkdir, mkdirat, and rmdir Functions
    CLOSED: [2016-12-26 Mon 22:20] SCHEDULED: <2016-12-26 Mon 22:11>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-26 Mon 22:20]
    :END:

    - if the *link count* of the directory becomes 0 with a /rmdir/ call, and if no other process has the directory open, then the *space* occupied by the directory is *freed*.

*** DONE 4.22 Reading Directories
    CLOSED: [2016-12-27 Tue 15:23] SCHEDULED: <2016-12-27 Tue 15:00>
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2016-12-27 Tue 15:23]
    :END:

    - to preserve file system sanity(ok), only the kernel can write to a directory.

*** TODO 4.23 chdir, fchdir, and getcwd Functions


* TODO Understanding the linux kernel, Third Edition (kernel version: 2.6.11)



* TODO Linux Kernel Development, Third  Edition (kernel  version: 2.6.34)

* STARTED Coding Interview Guide
  SCHEDULED: <2017-03-20 Mon 10:00>
** DONE 第1章 栈和队列
   CLOSED: [2017-03-21 Tue 16:42] SCHEDULED: <2017-03-20 Mon 10:00>
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-21 Tue 16:42]
   :END:
*** 设计一个有getMin功能的栈
    - 使用2个栈
    - 一个保存data，一个保存最小值

*** 由两个栈组成的队列
    - 如果stackPush要往stackPop中压入数据，必须一次性把stackPush中的数据全部压入。
    - 如果stackPop不为空，stackPush不能向stackPop中压入数据。

*** 如何仅用递归函数和栈操作逆序一个栈
    - 递归函数1：将栈底元素返回并移除。
    - 递归函数2：逆序一个栈。

*** 猫狗队列
    - 不能改变用户原有的类
    - 方法：将不同的实例盖上时间戳

*** 用一个栈实现另一个栈的排序
    - see page 14

*** 用栈来求解汉诺塔问题
    - recursive method, see page 15
    - using stack, see page 17

*** 生成窗口最大值数组
    - 要求时间复杂度O(n)
    - 利用双端队列实现窗口最大值的更新，see page 20

*** 构造数组的MaxTree
    - using stack and map, see page 23-25

*** 求最大子矩阵的大小
    - DP, using stack for each line, see page 27

*** 最大值减去最小值小于或等于num的子数组数量
    - using two deque: qmin and qmax

** DONE 第2章 链表问题
   CLOSED: [2017-03-24 Fri 09:33] SCHEDULED: <2017-03-21 Tue 16:45>
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-24 Fri 09:33]
   :END:
*** 打印两个有序链表的公共部分
    - easy

*** 在单链表和双链表中删除倒数第K个节点
    - see page 35

*** 删除链表的中间节点和a/b处的节点
    - 中间节点采用two pointers, 一个slow，一个fast
    - a/b：先找到该删除第n个节点（需要先遍历链表求表长）

*** 反转单向和双向链表
    - easy

*** 反转部分单向链表
    - 先找到反转部分的前一个节点和后一个节点，然后反转需要反转的部分，最后与前一个节点连接起来

*** 环形单链表的约瑟夫问题
    - 约瑟夫问题：用数学归纳法分析问题，寻求复杂度更低的解

*** 判断一个链表是否为回文结构
    - using stack, space O(n)
    - reverse the right part, space O(1)

*** 将单向链表按某值划分成左边小、中间相等、右边大的形式
    - 方法1：将所有nodes放入数组，对数组进行partition排序，connect
    - 方法2：将节点依次连入small、equal、big三个链表中，connect

*** 复制含有随机指针节点的链表
    - 方法1：using map
    - 方法2：1->2->3 ==> 1->1'->2->2'->3->3'

*** 两个单链表生成相加链表
    - using stack
    - 先reverse，再相加

*** 两个单链表相交的一系列问题
    - 问题1：判断链表是否有环
    - 问题2：判断两个无环链表是否相交
    - 问题3：判断两个有环链表是否相交

*** 将单链表的每K个节点之间逆序
    - method 1: using stack
    - method 2: just using pointers

*** 删除无序单链表中值重复出现的节点
    - method 1: using unordered_set, time O(n), space O(n)
    - method 2: selection sort, time O(n^2), space O(1)

*** 在单链表中删除指定值的节点
    - method 1: using stack
    - method 2: just using pointers

*** 将搜索二叉树转换成双向链表
    - method 1: using queue
    - method 2: recursive method(kind of special)

*** 单链表的选择排序
    - O(n^2)

*** 一种怪异的节点删除方式
    - unsafe, unstable, not awlays correct

*** 向有序的环形单链表中插入新节点
    - 注意极端情况：新值大于所有值或小于所有值

*** 合并两个有序的链表
    - easy

*** 按照左右半区的方式重新组合单链表
    - easy

** DONE 第3章 二叉树问题
   CLOSED: [2017-04-06 Thu 16:20] SCHEDULED: <2017-03-24 Fri 15:15>
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-04-06 Thu 16:20]
   :END:
*** 分别用递归和非递归方式实现二叉树先序、中序和后序遍历
    - 非递归的后序遍历比较难

*** 打印二叉树的边界节点
    - getHeight ==> get height of a node
    - get edges for each level and print(mind the sequence) ==> edgeMap
    - print leaf not in edgeMap

*** 如何较为直观地打印二叉树
    - 反中序：右中左

*** 二叉树的序列化和反序列化
    - 先序遍历 + queue
    - 层次遍历

*** 遍历二叉树的神级方法
    - Morris traversal
    - hard

*** 在二叉树中找到累加和为指定值得最长路径长度
    - record posible sums of each level using map

*** 找到二叉树中的最大搜索二叉子树
    - 后序遍历
    - 动态规划

*** 找到二叉树中符合搜索二叉树条件的最大拓扑结构
    - method 1: using queue, O(n^2)
    - method 2: 拓扑贡献记录

*** 二叉树的按层打印与ZigZag打印
    - 关键是知道何时换行

*** 调整搜索二叉树中两个错误的节点
    - 先找到这两个节点 ==> 中序遍历，降序处
    - 找到这两个节点的父节点 ==> 中序遍历
    - 交换这两个节点 ==> 情况很复杂！

*** 判断t1树是否包含t2树全部的拓扑结构
    - 遍历

*** 判断t1树中是否有与t2树拓扑结构完全相同的子树
    - using KMP, O(N+M)

*** 判断二叉树是否为平衡二叉树
    - 后序遍历
    - 在getHeight的过程中check左右子树的高度差

*** 根据后序数组重建搜索二叉树
    - 后序遍历的特点：头节点在最后，比头节点小的在左半部分，比头节点大的在右半部分

*** 判断一颗二叉树是否为搜索二叉树和完全二叉树
    - 中序遍历

*** 通过有序数组生成平衡搜索二叉树
    - 递归用数组中间的值生成头节点

*** 在二叉树中找到一个节点的后继节点
    - 分情况讨论

*** 在二叉树中找到两个节点的最近公共祖先
    - 后序遍历
    - 记录

*** Tarjan算法与并查集解决二叉树节点间最近公共祖先的批量查询问题
    - hard

*** 二叉树节点间的最大距问题
    - 后序遍历

*** 先序、中序和后序数组两两结合重构二叉树
    - 给定先序和后序不一定能重构：如果一颗二叉树除叶节点之外，其他所有节点都有左孩子和右孩子，只有这样的树才可以被先序和后序数组重构出来

*** 通过先序和中序数组生成后序数组
    - 划分

*** 统计和生成所有不同的二叉树
    - DP

*** 统计完全二叉树的节点数
    - 利用完全二叉树的性质

** TODO 第4章 递归和动态规划
*** 斐波那契系列问题的递归和动态规划
    - method 1: 暴力递归，O(2^n)
    - method 2: 顺序计算，O(n)
    - method 3: n阶递推数列==>矩阵乘法，O(log n)
    
*** 矩阵的最小路径和
    - dp
      - space: O(m*n)
      - space: O(min(m, n))
      
*** 换钱的最少货币数
    - dp
    
*** 换钱的方法数
    - 面试中的一般优化轨迹：暴力递归==>记忆搜索==>动态规划 

** 第5章 字符串问题

** 第6章 大数据和空间限制

** 第7章 位运算

** 第8章 数组和矩阵问题

** 第9章 其他题目


* STARTED Beauty of Programming
  SCHEDULED: <2017-03-21 Tue 23:30>
** DONE 面试杂谈
   CLOSED: [2017-03-22 Wed 09:21]
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-22 Wed 09:21]
   :END:
   - 做题时要注意陷阱，而且面试者会不断深化这个问题
   - 尽量弥补信息不对称，了解公司的最新科技、业务方向等细节很有帮助
   - 考虑问题的全面程度和逻辑分析能力
   - 每个人都是独立的个体，要有自己的想法，对自己的未来有规划
   - 专业技巧：
     - 程序设计思路
     - 编程风格
     - 对细节的考虑
     - 内存泄漏
     - 最优算法
     - 修改程序以满足新的需求
     - 举一反三
   - 职业技巧：
     - 交流能力
     - 合作能力
     - 自我评价和期望
     - 抗压能力
     - 追求卓越
   - tips:
     - 知己知彼
       - 知己，就是要了解自己的能力、兴趣、职业发展方向
       - 知彼，就是要了解公司的文化、战略方向和择才标准
     - 笔试就是考察基础，用扎实的理解和考虑完备的解答征服阅卷者
     - 面试就是探讨，缜密的代码和严密的分析，思考问题的过程比结果更重要
     - 纸上得来终觉浅，绝知此事要躬行

** TODO 第1章 游戏之乐——游戏中碰到的题目

** 第2章 数字之魅——数字中的技巧

** 第3章 结构之法——字符串及链表的探索

** 第4章 数字之趣——数字游戏的乐趣

   
* C++ Primer (5e)
** 第一章 开始
*** 编译、运行程序
    - C/C++程序编译流程：预处理 -> 编译 -> 汇编 -> 链接
      - 预处理：展开宏定义、处理条件编译指令、处理#include、删除注释、添加行号和文件名标识等等
      - 编译：词法分析、语法分析、语义分析、优化，产生汇编代码
      - 汇编：将汇编代码翻译成机器指令，生成目标文件
      - 链接：将目标文件（或库文件）链接在一起生成可执行文件
    - 打印上一个程序的返回值：
      #+BEGIN_SRC shell
      echo $?
      #+END_SRC
*** 初识输入输出
    - endl: 结束当前行，将与设备相关的缓冲区中的内容刷新到设备中，等价于
      #+BEGIN_SRC C++
      os.put('\n');
      os.flush();
      #+END_SRC
*** 控制流
    - for or while?
      - 循环次数已知时，使用for更简洁；否则while更适合
    - 从键盘键入文件结束符：
      - in Unix: Ctrl+D
      - in Window: Ctrl+Z
** 第二章 变量和基本类型
*** 基本内置类型
    - 字和字节
      - 字节：可寻址的最小内存块
      - 字：存储的基本单元
    - 选择数据类型：
      - 算术表达式中不用char：char在某些机器上是有符号的，而在另一些机器上是无符号的
      - 浮点运算用double：float精度不够，double和float的计算代价相差无几
    - 类型转换：
      - 右值超出范围时，有符号数和无符号数的处理方式不同：
        - 无符号数：初始值对无符号类型表示数值总数取模后的余数
        - 有符号数：结果是未定义的(*undefined*)
      - 不要混用有符号数和无符号数：
        - 当有符号数为负时，会自动转换为无符号数，导致异常结果
    - 指定字面值的类型（see p37)
*** 变量
    - 初始化 != 赋值
    - 列表初始化：如果初始值存在丢失信息的风险，编译器将报错（see p40）
    - 默认初始化：定义于函数体内的内置类型的对象如果没有初始化，则其值未定义；类的对象如果没有显示的初始化，则其值由类决定
    - 建议：
      1. 初始化每一个内置类型的变量
      2. 为了区别开初始化和赋值，初始化时一律采用列表初始化
    - 声明和定义
      - *declaration*: 使得名字为程序所知
      - *definition*: 创建与名字相关联的实体
      - 在函数体内部不能初始化一个由extern关键字标记的变量
      - 变量只能被定义一次，但是可以被多次声明
*** 作用域
    - C++允许内层作用域重新定义外层作用域中已有的名字：
      #+BEGIN_SRC C++
      int i = 42;
      int main() {
          int i = 100;
          int j = i; // j = 100
      }
      #+END_SRC
    - 在对象第一次使用的地方附近定义它
*** 复合类型
    - 引用：
      - 必须初始化,因为引用无法重新绑定到另一个对象
      - 初始化时只能绑定在对象上，不能绑定字面值
      - 不能定义引用的引用，因为引用本身不是一个对象
      - 初始化时类型要一致
    - 指针：
      - 指针本身就是一个对象
      - 指针无须在定义时赋初值
      - 指针的类型要和它所指向的对象严格匹配
        - 例外：
          1. 初始化const引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型
             #+BEGIN_SRC C++
             double dval = 3.14;
             const int &r = dval;  // 合法，将double转换为const int的临时量tmp，r绑定在tmp上
             #+END_SRC
      - 空指针：使用 *nullptr*, 避免使用NULL或0
      - 不能直接操作void*指针所指的对象
      - 引用本身不是一个对象，所以不存在指向引用的指针
    - const限定符
      - const对象一旦创建之后其值就不能再改变，所以const对象必须初始化
        #+BEGIN_SRC C++
        const int k; // error: k is unintialized
        #+END_SRC
      - 只能在const对象上执行不改变其内容的操作
      - 默认情况下，const对象被设定为仅在文件内有效
      - 如果想在多个文件之间共享const对象，不仅const对象的声明要加extern，它的定义也要加extern
      - 对const的引用：引用也必须是const的
        #+BEGIN_SRC C++
        const int ci = 1024;
        int &r = ci;  // 错误：试图让一个非const引用指向一个const对象
        #+END_SRC
      - const引用仅对引用可参与的操作做出了限定，而对引用的对象是不是常量未作限定
      - 顶层const和底层const
        - 顶层const：指针本身是const
        - 底层const：指针所指对象是const
        - 执行拷贝操作时，拷入和拷出的对象必须有相同的底层const资格
      - constexpr和常量表达式
        - 常量表达式：
          1. 值不会改变
          2. 在 *编译过程* 就能得到计算结果
        - 以下属于常量表达式：
          1. 字面值
          2. 用常量表达式初始化的const对象
          #+BEGIN_SRC C++
          const int sz = get_size(); // sz is not const expression, its value is availabe during runtime
          #+END_SRC
        - constexpr
          - [C++11] 将变量声明为constexpr类型，由编译器来验证变量的值是否是一个常量表达式
        - 字面值类型
          - 算术类型、引用、指针、枚举、数据成员都是字面值类型的聚合类
        - 指针和constexpr
          - *constexpr只对指针本身有效，与指针所指的对象无关*
          #+BEGIN_SRC C++
          constexpr int *q = nullptr; // q是一个指向整数的常量指针
          #+END_SRC
*** 处理类型        
    - 定义类型别名的两种方法：
      1. typedef
         #+BEGIN_SRC C++
         typedef double base, *p;
         #+END_SRC
      2. using
         #+BEGIN_SRC C++
         using SI = Sales_item; // SI是Sales_item的同义词
         #+END_SRC
    - 指针、常量和类型别名(p61)
      #+BEGIN_SRC C++
      typedef char *pstr; // pstr作为基本类型是一个指char的 *指针*
      const pstr cstr = 0; // cstr是指向char的常量指针
      const char *cstr = 0; // 这是对上一句的错误理解，const pstr ！= const char*, const pstr是指向char的常量指针，const char *是指向常量字符的指针
      const pstr *ps;
      #+END_SRC
    - auto
      - auto让编译器通过初始值推算变量的类型 ==> auto定义的变量 *必须有初始值*
      - auto和引用：
        以引用的对象的类型作为auto的类型
      - auto和常量：
        - auto一般会忽略顶层const，保留底层const
        - 设置一个类型为auto的引用时，初始值中的顶层常量属性仍然保留
    - decltype
      - decltype使用的表达式：
        1. 是一个变量，则返回改变量的类型（ *包括顶层const和引用* ）
        2. 不是变量，则返回表达式结果对应的类型
      - tips (*p63*)
        #+BEGIN_SRC C++
        int i = 42, *p = &i, &r = i;
        decltype(r) a = i; // decltype(r)的结果是int&
        decltype(r+0) b;   // r+0的结果不是变量，是一个int值
        decltype(*p) c;    // 如果表达式的内容是 *解引用操作* ，decltype将返回 *引用类型*
        #+END_SRC
        - decltype((var))的结果 *永远是引用*
        - decltype(var)的结果只有当 *var本身是引用* 时才是引用
        #+BEGIN_SRC C++
        int a = 3, b = 4;
        decltype(a) c = a; // int c = 3;
        decltype(a = b) d = a; // int &d = a;
        // a = 3, b = 4, c = 3, d = 3
        #+END_SRC
        赋值是会产生引用的典型表达式，但是表达式a=b作为decltype的参数， *只做推断类型用，不实际计算该表达式*
      - decltype和auto的区别：p64 ct_2.38

** 第三章 字符串、向量和数组
*** 命名空间的using声明 
    - 作用域操作符(::)
    - *头文件不应包含using声明*
      - 包含多个头文件的using声明可能产生名字冲突
*** 标准库类型string
**** 定义和初始化string对象
     - 初始化string对象的方式：
       #+BEGIN_SRC C++
       string s1;
       string s2(s1);
       string s2 = s1;
       string s3("value");
       string s3 = "value";
       string s4(n, 'c');
       string s5 = string(n, 'c');
       #+END_SRC
***** 直接初始化和拷贝初始化
      - 用等号：拷贝初始化
      - 不用等号：直接初始化
**** string对象上的操作
***** 读写string对象
      #+BEGIN_SRC C++
      string s;
      cin >> s;
      cout << s << endl;
      #+END_SRC
***** 读取未知数量的string对象
      #+BEGIN_SRC C++
      while (cin >> word) {
      }
      #+END_SRC
***** getline
      #+BEGIN_SRC C++
      string line;
      while (getline(cin, line)) ;
      #+END_SRC
***** empty() and size()
***** string::size_type
      - unsigned
      - 如果表达式中已有size()，不要再使用int
***** compare string对象
      - 比较规则(p80)
***** string相加
      #+BEGIN_SRC C++
      string s1 = "aer", s2 = "uiahr";
      string s3 = s1 + s2;
      #+END_SRC
      *s1+s1的结果是一个新的string对象*
***** 字面值和string对象相加
      - *字符串字面值* != string
      #+BEGIN_SRC C++
      string s4 = s1 + "sj"; // correct
      string s5 = "hello" + ", "; // wrong
      #+END_SRC
***** tips
      1. string的>>运算符和getline()的区别
         - string的>>运算符自动忽略字符串开头的空白
         - getline()直到遇到换行符为止（ *换行符也被读取进来，但是不存储在最后的字符串中* ）

*** 标准库类型vector
    #+BEGIN_QUOTE
    vector是模板而非类型。
    因为引用不是对象，所以 *不存在包含引用的vector* 。
    #+END_QUOTE
**** 定义和初始化vector对象
     - 圆括号：指定容量
     - 花括号：列表初始化
     - 当花括号里的值不能用来列表初始化，考虑 *用这个值作为容量值来构造vector*
**** 向vector对象中添加元素
     - 定义vector对象时没有必要指定容量大小，除非所有元素值相同
     - 如果循环内可能改变vector的容量，不能使用for循环
     
*** 迭代器介绍
    - 所有标准库容器都支持迭代器，但是只有vector和string（严格来说string不属于容器）支持下标运算符。
    - 有效的迭代器或者指向某个元素，或者指向容器中尾元素的下一个位置；其他都属于无效。
      
*** 数组
    - 数组的维度必须是一个常量表达式。
    - 数组不能用auto从初始化列表推断类型，必须在定义数组的时候指定类型。
    - As with vector, arrays hold objects. Thus, *there are no arrays of references*.
    - 数组不允许拷贝和赋值
    - 理解复杂数组声明最好的办法是从数组名字开始 *由内向外* 的顺序阅读。
    - 使用数组作为一个auto变量的初始值时， *推断得到的类型是指针而非数组* 。
    - 使用decltype关键字能返回正确的数组类型：
      #+BEGIN_SRC c++
      int ia[] = {1,2,3,4,5};
      decltype(ia) ia1 = {6,7,8,9,10};
      #+END_SRC
    - 标准库函数begin和end：
      #+BEGIN_SRC c++
      int *beg = begin(ia);
      int *last = end(ia);
      cout << *beg << endl; // 1
      cout << *(last-1) << endl; // 5
      #+END_SRC

<2017-10-17 Tue>
* C++ Concurrency In Action

** chapter01 
   - C++98标准不承认线程的存在，内存模型也 没有正式定义。
   - C++11有了全新的线程感知内存模型，扩展了管理线程、保护共享数据、线程间同步操作、低级原子操作的各种类。
  
** chapter02
*** 启动线程
    - 初始化std::thread时要注意不要写成类型对象的定义。(使用多组括号、使用列表初始化、使用lambda表达式)
    
*** 等待线程
    - join()
    - detach()
    - 如果有异常，处理异常的时候要join():
      #+BEGIN_SRC c++
      int main() {
          std::thread t{func};
          try {
          // do something
          } catch (...) {
              t.join();
              throw;
          }
          t.join();
          return 0;
      }
      #+END_SRC
    - 利用类的析构函数来确保join()
    
*** 向线程函数传递参数
    - 传递字符串常量到string&时，要传递一个构造好的string
    - 使用std::ref将参数转换成引用的形式
    - 传递成员函数指针,需要紧接着提供一个合适的对象
      #+BEGIN_SRC c++
      class X {
      public:
          void do_work();
      };
      X my_x;
      std::thread t(&X::do_work, &my_x);
      #+END_SRC
 
*** 转移线程所有权
    - 需要在线程对象被析构前，显示的等待线程完成或分离它，进行复制时也需要满足这些条件(不能通过赋一个新值给std::thread对象的方式来“丢弃”一个线程)
    - std::move()
   
*** 运行时决定线程数量
    - std::thread::hardware_concurrency()
   
*** 识别线程
    - std::thread::get_id()
    - std::this_thread::get_id()
    - std::thread::id
    - std::thread:type表示"没有线程"
    
** chapter09
   关键问题：
     - 可用线程数
     - 高效的任务分配方式
     - 处理任务依赖
*** 线程池
    - 

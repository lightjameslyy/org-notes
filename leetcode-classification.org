#+TITLE: leetcode classification
#+AUTHOR: lightjames
#+DATE: <2017-03-01 Wed>

* TODO Array
** 1. Two Sum
   - description: https://leetcode.com/problems/two-sum/#/description 
   - hint:
     1. using unordered_map
     2. take consideration of duplicates
** 11. Container With Most Water
   - description: https://leetcode.com/problems/container-with-most-water/#/description
   - hint: two pointers
** 15. 3Sum
   - description: https://leetcode.com/problems/3sum/#/description
   - hint: using two sum
** 16. 3Sum Closest
   - description: https://leetcode.com/problems/3sum-closest/#/description
   - hint: similar to 3Sum, find minimum difference
** 18. 4Sum
   - description: https://leetcode.com/problems/4sum/#/description
   - hint: using 3Sum
 
** 26. Remove Duplicates from Sorted Array
   - description: https://leetcode.com/problems/remove-duplicates-from-sorted-array/#/description
   - hint: fast and slow pointers
** 27. Remove Element
   - description: https://leetcode.com/problems/remove-element/#/description
   - hint: fast and slow pointers
** 31. Next Permutation 
   - description: https://leetcode.com/problems/next-permutation/#/description
   - hint:
     1. 从后往前找到第一个降序的位置d
     2. 从后往前找到第一个比d大的位置b
     3. swap(d, b)
     4. reverse(d+1, end)
** 33. Search in Rotated Sorted Array
   - description: https://leetcode.com/problems/search-in-rotated-sorted-array/#/description
   - hint: ( *关键是找到sorted的那一半* )
     1. if target == mid, return mid
     2. low < mid ==> left side is sorted, check if target is in (low, mid-1)
     3. mid < high ==> right side is sorted, check if target is in (mid+1, high)
** 34. Search for a Range 
   - description: https://leetcode.com/problems/search-for-a-range/#/description
   - hint:
     1. 从左往右找第一个target
     2. 从右往左找第一个target
** 35. Search Insert Position 
   - description: https://leetcode.com/problems/search-insert-position/#/description
   - hint: binary search
** 39. Combination Sum 
   - description: https://leetcode.com/problems/combination-sum/#/description
   - hint: backtracing
     1. target - nums[i] as the current target
** 40. Combination Sum II
   - description: https://leetcode.com/problems/combination-sum-ii/#/description
   - hint: similar to 39, 但是递归时要注意重复！
** 48. Rotate Image
   - description: https://leetcode.com/problems/rotate-image/#/description
   - hint: 
     - method 1: 沿着副对角线做翻转, 再上下翻转
     - method 2: 转圈 http://www.jiuzhang.com/solutions/rotate-image/
** 53. Maximum Subarray 
   - description:https://leetcode.com/problems/maximum-subarray/#/description 
   - hint: dp
** 54. Spiral Matrix 
   - description: https://leetcode.com/problems/spiral-matrix/#/description
   - hint:
     - top, left, bottom, right
** 55. Jump Game
   - description: https://leetcode.com/problems/jump-game/#/description
   - hint: greedy
** 56. Merge Intervals
   - description: https://leetcode.com/problems/merge-intervals/#/description
   - hint: sort
** 66. Plus One
   - description: https://leetcode.com/problems/plus-one/#/description
   - hint: trivial method
** 88. Merge Sorted Array
   - description: https://leetcode.com/problems/merge-sorted-array/#/description 
   - hint: backwards ==> generate result from num1's right to left
** 118. Pascal's Triangle 
   - description: https://leetcode.com/problems/pascals-triangle/#/description 
   - hint: trivial method
** 119. Pascal's Triangle II 
   - description: https://leetcode.com/problems/pascals-triangle-ii/#/description
   - hint: backwards
** 121. Best Time to Buy and Sell Stock
   - description: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/#/description
   - hint: dp, update *minPrice* and *maxProfit*
** 122. Best Time to Buy and Sell Stock II
   - description: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/#/description
   - hint: e.g. for [3,5,7], 7-3 = (5-3)+(7-5), we can just take for selling and buying can happen at the same time
** 167. Two Sum II - Input array is sorted
   - description: https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/#/description
   - hint: two pointers, and use binary search to accelerate
** 169. Majority Element
   - description: https://leetcode.com/problems/majority-element/#/description
   - hint: dp
** 189. Rotate Array
   - description: https://leetcode.com/problems/rotate-array/#/description
   - hint: reverse 3 times
** 217. Contains Duplicate
   - description: https://leetcode.com/problems/contains-duplicate/#/description
   - hint: unordered_set
** 219. Contains Duplicate II
   - description: https://leetcode.com/problems/contains-duplicate-ii/#/description
   - hint: unordered_map
** 268. Missing Number
   - description: https://leetcode.com/problems/missing-number/#/description
   - hint: bit manipulation, 异或两遍
** 283. Move Zeroes
   - description: https://leetcode.com/problems/move-zeroes/#/description
   - hint: two pointers
** 414. Third Maximum Number
   - description: https://leetcode.com/problems/third-maximum-number/#/description
   - hint: using LONG_MIN instead of INT_MIN to initialize the three maximums
** 448. Find All Numbers Disappeared in an Array
   - description: https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/#/description
   - hint: two pass 
** 485. Max Consecutive Ones
   - description: https://leetcode.com/problems/max-consecutive-ones/#/description
   - hint: dp: cur = 0, if nums[i] ==1 , ++cur; else cur = 0;
** 532. K-diff Pairs in an Array
   - description: https://leetcode.com/problems/k-diff-pairs-in-an-array/#/description
   - hint: two pointers, similar to two-sum
** 561. Array Partition I
   - description: https://leetcode.com/problems/array-partition-i/#/description
   - hint:
     1. sort ==> O(n log n) , O(1)
     2. hashtable ==> O(n), O(2n)
** 566. Reshape the Matrix 
   - description: https://leetcode.com/problems/reshape-the-matrix/#/description
   - hint: trivial method
** 581. Shortest Unsorted Continuous Subarray
   - description: https://leetcode.com/problems/shortest-unsorted-continuous-subarray/#/description
   - hint:
     1. find left sorted subarray (0, l) and right sorted subarray (r, len-1)
     2. find maximum and minimum between l and r
     3. using maximum and minimum to get final l and r
** 605. Can Place Flowers
   - description: https://leetcode.com/problems/can-place-flowers/#/description
   - hint: 
     1. 如果当前元素是1，那么它的下一个元素一定是0
** 624. Maximum Distance in Arrays
   - description: https://leetcode.com/problems/maximum-distance-in-arrays/#/description
   - hint: dp 
** 628. Maximum Product of Three Numbers 
   - description: https://leetcode.com/problems/maximum-product-of-three-numbers/#/description
   - hint: 注意负数的情况
** 73. Set Matrix Zeroes

* Backtracking
** 77. Combinations
** 78. Subsets
** 79. Word Search
** 89. Gray Code
** 90. Subsets II
** 93. Restore IP Addresses

* Bit manipulation
** 69. Sqrt(x)

* Binary Search
** 69. Sqrt(x)
** 74. Search a 2D Matrix
** 81. Search in Rotated Sorted Array II

* DFA
** 65. Valid Number

* Dynamic Programming
** 62. Unique Paths
   - 排列组合
** 63. Unique Paths II
** 64. Minimum Path Sum
** 72. Edit Distance
** 85. Maximal Rectangle
** 87. Scramble String
** 91. Decode Ways

* Hash Table
** 1. Two Sum
** 76. Minimum Window Substring

* DONE Linked List
  CLOSED: [2017-06-19 Mon 09:49]
** 2. Add Two Numbers
   - description: Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
                  Output: 7 -> 0 -> 8
   - hint: in place, 直接修改
** 19. Remove Nth Node From End of List
   - description: remove the nth node from the end of list and return its head
   - hint: 使用二级指针
** 21. Merge Two Sorted Lists
   - description: 合并两个有序的链表
   - hint: 普通思路
** 23. Merge k Sorted Lists
   - description: 合并k个有序的链表
   - hint: 不断地两两合并
** 24. Swap Nodes in Pairs 
   - description: 
   Given a linked list, swap every two adjacent nodes and return its head.
   For example,
   Given 1->2->3->4, you should return the list as 2->1->4->3.
   - hint: trivial method
** 25. Reverse Nodes in k-Group
   - description:
   Given this linked list: 1->2->3->4->5
   For k = 2, you should return: 2->1->4->3->5
   For k = 3, you should return: 3->2->1->4->5
   - hint: trivial method
** 61. Rotate List
   - description: 
   Given 1->2->3->4->5->NULL and k = 2,
   return 4->5->1->2->3->NULL.
   - hint: trivial method
** 82. Remove Duplicates from Sorted List II
   - description: 删除链表中的重复节点（ *重复的数字全都删除* ）
   - hint: p为head的next，如果p的值和head的值不同，则将head->next置为deleteDuplicates(p)，返回head;否则直到找到第一个p不等于head的地方，返回deleteDuplicates(p)  
** 83. Remove Duplicates from Sorted List
   - description: 删除链表中的重复节点（ *重复的数字只保留一个* ）
   - hint: 遍历一遍，如果next的值重复则删除next节点
** 86. Partition List
   - description: 
   Given 1->4->3->2->5->2 and x = 3,
   return 1->2->2->4->3->5.
   - hint: trivial method
** 92. Reverse Linked List II
   - description:
   Reverse a linked list from position m to n. Do it in-place and in one-pass.
   For example:
   Given 1->2->3->4->5->NULL, m = 2 and n = 4,
   return 1->4->3->2->5->NULL.
   - hint: trivial method
** 109. Convert Sorted List to Binary Search Tree
   - description: 
   Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
   - hint: 
     1. two pointers: slow and fast
     2. recursively construct the BST
** 138. Copy List with Random Pointer
   - description:
   A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
   Return a deep copy of the list.
   - hint: 在每个节点后面插入一个label相同的新节点，很容易得到对应的next和random，最后重新连接所有节点。 
** 141. Linked List Cycle
   - description: 判断链表是否存在环
   - hint: 两个指针，fast每次移动两个节点，slow每次移动一个节点
** 142. Linked List Cycle II
   - description: 找出链表中环的入口节点
   - hint: 设相遇时，head到entry的距离为l1，entry到meeting的距离为l2，cycle的长度为r，共走了n次，则有：
     1. slow节点走了: l1 + l2
     2. fast节点走了: l1 + l2 + mr 
     3. so, 2*(l1+l2) = l1+l2+mr ==> l1+l2 = mr ==> l1 = (m-1)r + r-l2
     4. 所以，相遇后slow和fast的步幅都调整为1，必然会在entry相遇
** 143. Reorder List
   - description: https://leetcode.com/problems/reorder-list/#/description
   - hint: reverse and insert
** 147. Insertion Sort List 
   - description: https://leetcode.com/problems/insertion-sort-list/#/description
   - hint: update tail, using previous start position
** 148. Sort List 
   - description: https://leetcode.com/problems/sort-list/#/description
   - hint: merge sort
** 160. Intersection of Two Linked Lists
   - description: https://leetcode.com/problems/intersection-of-two-linked-lists/#/description
   - hint:
     设两个链表长度为a和b：
     1. a == b, 依次比较对应的两个节点 
     2. a != b, a + b == b + a, 遍历两遍
** 203. Remove Linked List Elements
   - description: https://leetcode.com/problems/remove-linked-list-elements/#/description
   - hint: trivial method 
** 206. Reverse Linked List
   - description: https://leetcode.com/problems/reverse-linked-list/#/description
   - hint: using a pre node initialized with nullptr
** 234. Palindrome Linked List
   - description: https://leetcode.com/problems/palindrome-linked-list/#/description
   - hint: reverse the right half of the list and compare one by one
** 237. Delete Node in a Linked List
   - description: https://leetcode.com/problems/delete-node-in-a-linked-list/#/description
   - hint: assign next node's value to the current node, delete the next node
** 328. Odd Even Linked List
   - description: https://leetcode.com/problems/odd-even-linked-list/#/description
   - hint: two pointers
** 445. Add Two Numbers II
   - description: https://leetcode.com/problems/add-two-numbers-ii/#/description
   - hint: using stack 
   
* Stack
** 71. Simplify Path
** 84. Largest Rectangle in Histogram

* Two Pointers
** 75. Sort Colors
** 76. Minimum Window Substring
** 80. Remove Duplicates from Sorted Array II
** 86. Partition List
